package chat.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import chat.domain.Message;
import chat.domain.Room;
import chat.domain.RoomEntry;
import chat.domain.User;
import chat.service.RoomEntryService;
import chat.service.RoomService;
import chat.service.UserService;
import message.service.MessageService;
import message.service.MessageServiceLogic;

@Controller
@RequestMapping("/roomEntry")
public class RoomEntryController {

	@Autowired
	private UserService userService;
	@Autowired
	private RoomService roomService;

	@Autowired
	private RoomEntryService roomEntryService;

	MessageService messageService = new MessageServiceLogic();
	@RequestMapping("/joinRoom.do")
	public ModelAndView joinRoom(String roomNumber, String loginId) {
		
		List<Message> messageList = messageService.retrieveMessage(roomNumber, "1");
		
		Room room = roomService.retrieveRoom(roomNumber);
		
		User user = userService.retrieveUser(loginId);
		
		boolean isAdmin = false;
		if(loginId.equals(room.getAdmin().getLoginId())){
			isAdmin = true;
		}
		
		Collections.reverse(messageList);
		ModelAndView mav = new ModelAndView();
		
		
		mav.addObject("isAdmin",isAdmin);
		mav.addObject("room",room);
		mav.addObject("user",user);
		mav.addObject("roomNumber",roomNumber);
		mav.addObject("messageList",messageList);
		
		
		List<RoomEntry> roomEntryList = roomEntryService.retrieveRoomEntryByRoomNumber(roomNumber);
		
		
		if(roomEntryList.size() == 0) {
			
			RoomEntry roomEntry = new RoomEntry();
			 room = roomService.retrieveRoom(roomNumber);
			
			 user = userService.retrieveUser(loginId);
			
			 roomEntry.setRoom(room);
			 roomEntry.setUser(user);
			roomEntryService.registerRoomEntry(roomEntry);
			mav.addObject("roomEntry", roomEntry);
			mav.setViewName("/views/chating.jsp");
		
			}else if(roomEntryList.size() != 0){
				
			for (RoomEntry roomEntryResult: roomEntryList) {
						
				
				if (roomEntryService.checkedRoomUserByRoomNumber(roomNumber, loginId)) {
				
					mav.addObject("roomEntry", roomEntryResult);
					mav.setViewName("/views/chating.jsp");
			
				break;
				
			}else{
				
				 roomEntryResult.setRoom(room);
				 roomEntryResult.setUser(user);
				roomEntryService.registerRoomEntry(roomEntryResult);
				mav.addObject("roomEntry", roomEntryResult);
				mav.setViewName("/views/chating.jsp");
				break;
			}
		}
			
	} 
		return mav;
	}
	@RequestMapping("/exitRoom.do")
	public String exitRoom(String roomNumber, String loginId) {
		
		
		List<RoomEntry> roomEntryList = roomEntryService.retrieveRoomEntryByRoomNumber(roomNumber);
		
		for(RoomEntry roomEntry : roomEntryList){
			if(roomEntry.getUser().getLoginId().equals(loginId)){
				roomEntryService.removeRoomEntry(roomEntry);
				
			}
			else{
				
			}
			
		}
	   

		return "redirect:/";
	}

	@RequestMapping("/joinRoomUserList.do")
	public ModelAndView joinRoomUserList(String roomNumber){
		
		List<RoomEntry> roomEntryList = roomEntryService.retrieveRoomEntryByRoomNumber(roomNumber);
		
		
 		
		for(RoomEntry roomEntry : roomEntryList){
			String loginId = roomEntry.getUser().getLoginId();
			User user = userService.retrieveUser(loginId);
			roomEntry.setUser(user);
		}
		ModelAndView mav = new ModelAndView();
		
		mav.addObject("roomEntryList", roomEntryList);
		mav.setViewName("/views/main.jsp");
		
		return mav;
	}
	
	@RequestMapping("/addList.do")
	@ResponseBody
	public List<Message> addlist(String page,String roomNumber){
		List<Message> messageList =messageService.retrieveMessage(roomNumber, page);
		return messageList;
	}
	
	@RequestMapping("/userInfo.do")
	@ResponseBody
	public List<RoomEntry> addUserInfo(String roomNumber){
		List<RoomEntry> roomEntry = roomEntryService.retrieveRoomEntryByRoomNumber(roomNumber);
		return roomEntry; 
	}
	
	
	@RequestMapping("/viewUserInfo.do")
	public ModelAndView viewUserInfo(String roomNumber){
		ModelAndView mav = new ModelAndView();
		Room room = roomService.retrieveRoom(roomNumber);	
		List<RoomEntry> roomEntryList=roomEntryService.retrieveRoomEntryByRoomNumber(roomNumber);
	
		
		mav.addObject("room",room);
		mav.addObject("roomEntryList",roomEntryList);
	    mav.setViewName("/views/userList.jsp");	
		return mav; 
	}
	

	@RequestMapping("/chatUserInfo.do")
	@ResponseBody
	public User chatUserInfo(String loginId){
		User user = userService.retrieveUser(loginId);
		return user; 
	}
	
	
	
	
	
	
	
}
