package chat.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import chat.domain.Category;
import chat.domain.Room;
import chat.domain.RoomEntry;
import chat.domain.User;
import chat.service.RoomService;

@Controller
@RequestMapping("/room")
public class RoomController {
	
	@Autowired
	private RoomService roomService;
	
	@RequestMapping("/roomList.do")
	public String roomList(HttpSession session,String more,Model model){
		//
		User user = (User) session.getAttribute("loginUser");
		
		System.out.println("로그인아이디:"+user.getLoginId());
		String loginId = user.getLoginId();
		
		boolean inRoom = false;
		List<Room> roomList = roomService.retrieveRoomAllByRowNum(more);
		for(Room rooms : roomList){
			List<RoomEntry> entryUsers = rooms.getUsers();
			for(RoomEntry users : entryUsers){
				System.out.println("참가유저:" +users.getUser().getLoginId());
				System.out.println(loginId+"와 "+users.getUser().getLoginId()+"가 같은가?");
				if(loginId.equals(users.getUser().getLoginId())){
					
					inRoom = true;
					
				}
			}
		}
		System.out.println(inRoom);
		model.addAttribute("inRoom",inRoom);
		model.addAttribute("roomList",roomList);
		
		return "/views/main.jsp";
	}
	
	@RequestMapping("/listMore.do")
	@ResponseBody
	public List<Room> moreRoomList(Model model,String more,String type,String selectCategory,String keyword) {

		System.out.println(more);
		if("All".equals(type)){
		List<Room> roomList = roomService.retrieveRoomAllByRowNum(more);
		return roomList;
		}else if("CATEGORY".equals(type)){
			Category category = Category.valueOf(selectCategory);
			List<Room> roomList = roomService.retrieveRoomByCategory(category, more);
			return roomList;
		}
		List<Room> roomList = roomService.retrieveRoomByTitleForSearch(keyword);
		return roomList;
	}
	
	@RequestMapping("/roomListByCategory.do")
	public String roomListByCategory(String selectCategory,String more,Model model){
		
		System.out.println("넘어오는 카테고리 : "+ selectCategory);
		Category category = Category.valueOf(selectCategory);
		System.out.println("카테고리 : "+category);
		
		List<Room> roomList = roomService.retrieveRoomByCategory(category, more);
		model.addAttribute("roomList",roomList);
		
		return "/views/main.jsp";
	}
	
	@RequestMapping(value="/registerRoom.do", method=RequestMethod.GET)
	public String moveRegisterRoom(HttpSession session,Room room){
		
		return "redirect:/views/createroom.jsp";
	}
	
	@RequestMapping(value="/registerRoom.do", method=RequestMethod.POST)
	public String registerRoom(HttpSession session,Room room){
		
		
		/*System.out.println(room.getCategory());
		System.out.println(room.getContents());
		System.out.println(room.getLimitUsers());
		System.out.println(room.getNotice());
		System.out.println(room.getPassword());
		System.out.println(room.getTitle());*/
		User user = (User) session.getAttribute("loginUser");
		
		System.out.println("로그인아이디:"+user.getLoginId());

		
		Room regRoom = new Room();

		regRoom.setAdmin(user);
		Category category = Category.valueOf(room.getCategory());
		regRoom.setCategory(category.getCode());
		regRoom.setContents(room.getContents());
		regRoom.setDeleteYn(false);
		regRoom.setLimitUsers(room.getLimitUsers());
		regRoom.setNotice(room.getNotice());
		regRoom.setPassword(room.getPassword());
		regRoom.setSecret(room.isSecret());
		regRoom.setTitle(room.getTitle());
		
		roomService.registerRoom(regRoom);
		
		return "/room/roomList.do";
	}
	
	@RequestMapping("/chkAdmin.do")
	@ResponseBody
	public boolean chkUserIsAdmin(String loginId) {
		
		Room room = roomService.retrieveRoomByAdmin(loginId);
		if(room != null){
			
			return true;
		}
		return false;
	}
	
	
}
